# -*- coding: utf-8 -*-
"""CMS Medicare Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HTypzPJG0dJCPDNnLv0iI03BT2t9gr51
"""

import pandas as pd
import numpy as np

"""##Extract Data"""

## Get Data from CMS Website
##Unzip files
!wget -q https://www.cms.gov/files/zip/2021-low-income-subsidy-contract-enrollment-county.zip
!wget -q https://www.cms.gov/files/zip/monthly-enrollment-state-january-2022.zip


!unzip  2021-low-income-subsidy-contract-enrollment-county.zip
!unzip  monthly-enrollment-state-january-2022.zip

LIS_file = "/content/drive/MyDrive/Komodo Health_LAST ROUND/2021 LIS PDP&MAPD_by_State_County_Contract.xlsx"
LIS_by_County = pd.read_excel(LIS_file)

##MonthlyEnrollment_file = "/content/drive/MyDrive/Komodo Health_LAST ROUND/2021 LIS PDP&MAPD_by_State_County_Contract.xlsx
##MonthlyEnrollment = pd.read_csv(MonthlyEnrollment_file)

xls = pd.ExcelFile(LIS_file)
df1 = pd.read_excel(LIS_file, sheet_name=xls.sheet_names[0])
df2 = pd.read_excel(LIS_file, sheet_name=xls.sheet_names[1])

df2

"""##Data Prep"""

##Get Two worksheets
##Rename Columns and Union into one Dataframe

xls = pd.ExcelFile(LIS_file)
for sheet in xls.sheet_names:
  print(sheet)

print(xls.sheet_names[0])
print(xls.sheet_names[1])

df1 = pd.read_excel(LIS_file, sheet_name=xls.sheet_names[0])
df2 = pd.read_excel(LIS_file, sheet_name=xls.sheet_names[1])
df1 = df1.rename(columns = {"LIS MA-PD_Enrolled": "LIS"})
df2 = df2.rename(columns = {"LIS PDP_Enrolled": "LIS"})
df = pd.concat([df1,df2])
##df_impute = pd.concat([df1,df2])

df1

df["LIS"] = pd.to_numeric(df["LIS"] , errors ='coerce').fillna(0).astype('int')

##Validation
df[df["LIS"] <0]
print(df1.count() + df2.count() == df.count())

grouped_df = df.groupby('State Name').agg('sum').sort_values("LIS", ascending = False)
grouped_df = grouped_df.rename(columns = {"State Name": "STATENAME"})

grouped_df

"""###Question 2"""

def convertNumCommas(num):
    if type(num) is str:
        if num == "*":
          return 0
        else:
          return int(num.replace(',', ''))
    elif type(num) is int:
        return num
    else:
      return "help"

convertNumCommas("1,000")

MonthlyEnrollment["Eligible"] = MonthlyEnrollment["Eligible"].apply(lambda row: convertNumCommas(row))
MonthlyEnrollment["MA Enrolled"] = MonthlyEnrollment["MA Enrolled"].apply(lambda row: convertNumCommas(row))
MonthlyEnrollment["Other Enrolled"] = MonthlyEnrollment["Other Enrolled"].apply(lambda row: convertNumCommas(row))
MonthlyEnrollment["PDP Enrolled"] = MonthlyEnrollment["PDP Enrolled"].apply(lambda row: convertNumCommas(row))
MonthlyEnrollment.dtypes

##All non numerics to 0 
MonthlyEnrollment["Other Enrolled"] = pd.to_numeric(MonthlyEnrollment["Other Enrolled"] , errors ='coerce').fillna(0).astype('int')
MonthlyEnrollment["MA Enrolled"] = pd.to_numeric(MonthlyEnrollment["MA Enrolled"] , errors ='coerce').fillna(0).astype('int')
MonthlyEnrollment["PDP Enrolled"] = pd.to_numeric(MonthlyEnrollment["PDP Enrolled"] , errors ='coerce').fillna(0).astype('int')

MonthlyEnrollment["Total_Enrolled"] = MonthlyEnrollment["Other Enrolled"]  + MonthlyEnrollment["MA Enrolled"] + MonthlyEnrollment["PDP Enrolled"]

MonthlyEnrollment['STATENAME'] = MonthlyEnrollment['STATENAME'].str.upper()

MonthlyEnrollment.head()

grouped_df.head()

left_merged = pd.merge(MonthlyEnrollment, grouped_df,
                        how="left", left_on = "STATENAME", right_on = grouped_df.index
                       )

left_merged['percent_enrolled'] = left_merged['LIS']/left_merged['Total_Enrolled']

left_merged = left_merged.sort_values('percent_enrolled',ascending = False)

left_merged[["STATENAME", "Total_Enrolled", "LIS", "percent_enrolled"]]

"""###Question 3"""

df_impute1 = df.replace(0, np.nan)
df_impute1["Unique"] = df_impute1["State Name"] + df_impute1["County Name"]

df_impute1["LIS_mean"] = df_impute1.groupby("Unique")["LIS"].transform(lambda x: x.fillna(x.mean()))

df_impute1["LIS_median"] = df_impute1.groupby("Unique")["LIS"].transform(lambda x: x.fillna(x.median()))

df_impute1

df.dtypes

df_impute1 = df.replace(0, np.nan)

df_impute1["NA_Count"] = df_impute1.LIS.isnull().groupby(df_impute1['Unique']).transform('sum').astype(int)

df_impute1.head()

df_impute1["NA_Count"] = df_impute1.LIS.isnull().groupby(df_impute1['Unique']).transform('sum').astype(int)

df_impute1

df_impute1["Numeric"] =  df_impute1.groupby('Unique')['LIS'].transform('count')

df_impute1["NA_Percent"] = df_impute1["NA_Count"] / (df_impute1["NA_Count"] + df_impute1["Numeric"] ) * 100

df_impute1.sort_values("Numeric", ascending = False)

df_impute1[["State Name", "County Name", "LIS", "NA_Count", "Numeric", "NA_Percent", "Unique"]].sort_values("NA_Percent", ascending = True)

##df_impute1["LIS"] = pd.to_numeric(df_impute1.LIS, errors = 'coerce')

df_impute1["LIS_dis"] = df_impute1.groupby("Unique")["LIS"].transform(lambda x: x.fillna(np.random.normal(x.mean(), x.std(), 1)[0]))

df_impute1

##df_impute1 = df_impute1.sort_values("NA_Percent")

x = 6
np.random.normal(30, 20, 1)[0]

top = df_impute1[df_impute1["Unique"] == "KENTUCKYLeslie"].groupby("Unique").agg('sum')

top